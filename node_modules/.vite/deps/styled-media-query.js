import {
  Ce
} from "./chunk-7R4WDUYY.js";
import "./chunk-ZOIWZPCO.js";
import "./chunk-DFKQJ226.js";

// node_modules/styled-media-query/dist/styled-media-query.es.js
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}
function pxToEmOrRem(breakpoints) {
  var ratio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16;
  var unit = arguments.length > 2 ? arguments[2] : void 0;
  var newBreakpoints = {};
  for (var key in breakpoints) {
    var point = breakpoints[key];
    if (String(point).includes("px")) {
      newBreakpoints[key] = +(parseInt(point) / ratio) + unit;
      continue;
    }
    newBreakpoints[key] = point;
  }
  return newBreakpoints;
}
function pxToEm(breakpoints) {
  var ratio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16;
  return pxToEmOrRem(breakpoints, ratio, "em");
}
function pxToRem(breakpoints) {
  var ratio = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16;
  return pxToEmOrRem(breakpoints, ratio, "rem");
}
function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n          @media (min-width: ", ") {\n            ", "\n          }\n        "]);
  _templateObject5 = function _templateObject52() {
    return data;
  };
  return data;
}
function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n          @media (max-width: ", ") {\n            ", "\n          }\n        "]);
  _templateObject4 = function _templateObject42() {
    return data;
  };
  return data;
}
function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n    @media (min-width: ", ") and\n      (max-width: ", ") {\n      ", "\n    }\n  "]);
  _templateObject3 = function _templateObject32() {
    return data;
  };
  return data;
}
function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    @media (min-width: ", ") {\n      ", "\n    }\n  "]);
  _templateObject2 = function _templateObject22() {
    return data;
  };
  return data;
}
function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    @media (max-width: ", ") {\n      ", "\n    }\n  "]);
  _templateObject = function _templateObject6() {
    return data;
  };
  return data;
}
var defaultBreakpoints = {
  huge: "1440px",
  large: "1170px",
  medium: "768px",
  small: "450px"
};
function getSizeFromBreakpoint(breakpointValue) {
  var breakpoints = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (breakpoints[breakpointValue]) {
    return breakpoints[breakpointValue];
  } else if (parseInt(breakpointValue)) {
    return breakpointValue;
  } else {
    console.error("styled-media-query: No valid breakpoint or size specified for media.");
    return "0";
  }
}
function generateMedia() {
  var breakpoints = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultBreakpoints;
  var lessThan = function lessThan2(breakpoint) {
    return function() {
      return Ce(_templateObject(), getSizeFromBreakpoint(breakpoint, breakpoints), Ce.apply(void 0, arguments));
    };
  };
  var greaterThan = function greaterThan2(breakpoint) {
    return function() {
      return Ce(_templateObject2(), getSizeFromBreakpoint(breakpoint, breakpoints), Ce.apply(void 0, arguments));
    };
  };
  var between = function between2(firstBreakpoint, secondBreakpoint) {
    return function() {
      return Ce(_templateObject3(), getSizeFromBreakpoint(firstBreakpoint, breakpoints), getSizeFromBreakpoint(secondBreakpoint, breakpoints), Ce.apply(void 0, arguments));
    };
  };
  var oldStyle = Object.keys(breakpoints).reduce(function(acc, label) {
    var size = breakpoints[label];
    acc.to[label] = function() {
      console.warn("styled-media-query: Use media.lessThan('".concat(label, "') instead of old media.to.").concat(label, " (Probably we'll deprecate it)"));
      return Ce(_templateObject4(), size, Ce.apply(void 0, arguments));
    };
    acc.from[label] = function() {
      console.warn("styled-media-query: Use media.greaterThan('".concat(label, "') instead of old media.from.").concat(label, " (Probably we'll deprecate it)"));
      return Ce(_templateObject5(), size, Ce.apply(void 0, arguments));
    };
    return acc;
  }, {
    to: {},
    from: {}
  });
  return Object.assign({
    lessThan,
    greaterThan,
    between
  }, oldStyle);
}
var index = generateMedia();
var styled_media_query_es_default = index;
export {
  styled_media_query_es_default as default,
  defaultBreakpoints,
  generateMedia,
  pxToEm,
  pxToRem
};
//# sourceMappingURL=styled-media-query.js.map
